#include<stdio.h>
#include<ctype.h>
#include<string.h>
char keyword[30][30]={"int","while","break","for","do","if","float","char","switch","double","short","long","unsigned","sizeof","else","register","extern","static",
"auto","case","break","volatile","enum","typedef"};
char id[20], num[10];
char symbol_table[30][30];
int j=1,k=0;
int check_keyword(char s[])
{
int i;
for(i=0;i<24;i++)
if(strcmp(s,keyword[i])==0)
return 1;
return 0;
}
void store_symbol_tableF(char id[],int n){
	int flag=0;
	for(k=0;k<n;k++)
	 {
	  if(strcmp(id,symbol_table[k])==0)
	    flag++;
	 }
	 if(flag==0){
	 	
	 	for(int i=0;i<strlen(id);i++){
	 		symbol_table[n][i]=id[i];
	 		
			}
	 			printf("%s \t\t\t%d\n",symbol_table[n],&symbol_table[n]);
		}

}

int main()
{
int n;
FILE *fp1,*fp2;
char c;
int state=0;
int i=0,j=0;
fp1=fopen("code.txt","r");//input file containing src prog
fp2=fopen("lexical_analyzer.txt","w");//output file name

while((c=fgetc(fp1))!=EOF)
{ 
switch(state)
{ 
case 0: 
       if(isalpha(c)){
           state=1;
											id[i++]=c;
										}
       else if(isdigit(c)){
           state=2;
											num[j++]=c;
										}
       else if(c=='<' || c=='>' || c=='=' || c=='!')
           {
										 state=3;
           fprintf(fp2,"\n%c",c);
          }
       else if(c=='/')
           state=4;
       else if(c==' ' || c=='\t' || c=='\n')
           state=0;
       else if(c=='(' || c==')' || c=='{' || c=='}' || c==';' || c==',' || c=='[' || c==']')
           fprintf(fp2,"\n%c: Delimiter",c);
       else if(c=='%')
           {
											fprintf(fp2,"\n%c",c);
           state=7;
          }
							else
           fprintf(fp2,"\n%c",c);
       break;
case 1:
       if(isalnum(c)){
         state=1; 
									id[i++]=c;
        }
       else{
          id[i]='\0';
         if(check_keyword(id))
            fprintf(fp2,"\n%s: \t keyword ",id);
         else if(strcmp(id,"include")==0)
            fprintf(fp2,"\n%s: \t preprocessor directive ",id);
         else if(strcmp(id,"stdio")==0)
            fprintf(fp2,"\n%s: \t standard input output",id);
									else{
            fprintf(fp2,"\n%s: \t identifier",id);
            n++;
         store_symbol_tableF(id,n);    // function call to store id in symbol table
       }
         state=0;
         i=0;
         ungetc(c,fp1);
        }
        break;
case 2:
       if(isdigit(c)){
          num[j++]=c;
          state=2;
          }
       else{
          num[j]='\0';
          fprintf(fp2,"\n%s: \t number",num);
          state=0;
          j=0;
          ungetc(c,fp1);
        }
         break;
case 3:if(c=='='){ 
          fprintf(fp2,"%c:\t relational operator ",c);
          state=0;
        }
       else{
          fprintf(fp2,":\t relational operator ");
          state=0;
          ungetc(c,fp1);
        }
        break;
case 4:
        if(c=='*')
           state=5;
        else
           fprintf(fp2,"\n invalid lexeme");
        break;
case 5: 
        if(c=='*')
           state=6;
        else
           state=5;
        break;
case 6:
        if(c=='*')
           state=6;
        else if(c=='/')
           state=0;
        else
           state=5;
        break;
case 7:
	       if(c=='d' || c=='c' || c=='s' || c=='f')
	         fprintf(fp2,"%c: format specifier",c);
	       else
	         fprintf(fp2,"\n%c modulo division",c);
	       state=0;
}//End of switch
}//end of while   
if(state==5)
    fprintf(fp2,"comment did not close");
fclose(fp1);
fclose(fp2);
return 0;
}
